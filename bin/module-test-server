#!/usr/bin/env node

module.exports = function () {
	var done = _.last( arguments );
	var express = require( 'express' );
	var bodyParser = require( 'body-parser' );
	var cookieParser = require( 'cookie-parser' );
	var debug = require( 'debug' )( process.env.DEBUG );
	var http = require( 'http' );
	var logger = require( 'morgan' );
	var app = global.app = express();
	var port = process.env.PORT || '3000';

	app.set( 'port', port );

	var server = http.Server( app );
	global.server = server;

	// app.use( logger( 'dev' ) );
	app.use( bodyParser.json() );
	app.use( bodyParser.urlencoded( { extended: false } ) );
	app.use( cookieParser() );

	var routesHook;

	try {
		routesHook = require( process.cwd() + '/test/routes' );
	} catch ( e ) {
		routesHook = function ( cb ) {
			cb();
		}
	}

	routesHook( function () {

		app.use( function ( err, req, res, next ) {
			var status = err.status || 500;
			if (status == 500) {
				console.log("Server 500 Error:\n", err.stack || err);
			}

			res.status( status ).json( {
				error: {
					message: err.message,
					status: status
				}
			} );
		} );

		server.listen( port );
		server.on( 'error', onError );
		server.on( 'listening', function () {
			var addr = server.address();
			var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
			debug( 'Listening on ' + bind );
			done();
		} );
	} );

	function onError( error ) {
		if ( error.syscall !== 'listen' ) throw error;
		var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
		switch ( error.code ) {
			case 'EACCES':
				console.error( bind + ' requires elevated privileges' );
				process.exit( 1 );
				break;
			case 'EADDRINUSE':
				console.error( bind + ' is already in use' );
				process.exit( 1 );
				break;
			default:
				throw error;
		}
	}
};
